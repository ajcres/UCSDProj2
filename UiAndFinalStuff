pip install opencv-python



import numpy as np
import cv2
from tkinter import *
from PIL import Image, ImageTk
from tkinter.filedialog import askopenfilename
globImPath = ""
globIm = None
globT = None
userImage = None



#machine learning code
try:
    globT.destroy()
except:
    print("",end="")
w1 = Tk()
w1.update()
w1.withdraw()
w1.lift()
w1.wm_attributes('-topmost', 1)
try:
    faceML = askopenfilename(filetypes=[("XML documents","*.xml")])
    face_cascade = cv2.CascadeClassifier(faceML)
    w1.destroy()
except:
    print("File Selection Error - rerun this cell to correct")
    w1.destroy()
w2 = Tk()
w2.update()
w2.withdraw()
w2.lift()
w2.wm_attributes('-topmost', 1)
try:
    eyeML = askopenfilename(filetypes=[("XML documents","*.xml")])
    eye_cascade = cv2.CascadeClassifier(eyeML)
    w2.destroy()
except:
    print("File Selection Error - rerun this cell to correct")
    w2.destroy()



#UI and logic code  
def fileSelect():
    Tk().withdraw()
    global globImPath
    global globT
    global userImage
    if True:
        globT.update()
        globT.withdraw()
        globT.lift()
        globT.wm_attributes('-topmost', 1)
        globImPath = askopenfilename(filetypes=[("Image Files",("*.png","*.jpeg","*.jp2","*.jpeg","*.jpg"))])
        
        imo=Image.open(globImPath)
        if (imo.width>800):
            imo=imo.resize((800, imo.height),Image.ANTIALIAS)
        if (imo.height>600):
            imo=imo.resize((imo.width, 600),Image.ANTIALIAS)
        
        globIm=ImageTk.PhotoImage(imo)
        
        if userImage is None:
            userImage = Label(globT,image=globIm)
            userImage.image = globIm
            userImage.pack(side=BOTTOM)
        else:
            userImage.configure(image=globIm)
            userImage.image = globIm
        goButton['state']='normal'
        globT.deiconify()
        globT.update()
        #globT.minsize(globT.winfo_width(), globT.winfo_height())
    else:
        print("File type not supported")
        globT.deiconify()
def useCamera():
    video_capture = cv2.VideoCapture(0)
    ttt = True
    try:
        while cv2.getWindowProperty('Live Feed', 0) >= 0 or ttt:
            # Capture frame-by-frame
            ret, frame = video_capture.read()

            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

            faces = face_cascade.detectMultiScale(gray, scaleFactor = 1.1, minNeighbors=5, minSize=(30, 30), flags = cv2.CASCADE_SCALE_IMAGE)
            eyes = face_cascade.detectMultiScale(gray, scaleFactor = 1.1, minNeighbors=5, minSize=(30, 30), flags = cv2.CASCADE_SCALE_IMAGE)
            for (x,y,w,h) in faces:
                cv2.rectangle(frame,(x,y),(x+w,y+h),(255,0,0),2)
                roi_gray = gray[y:y+h, x:x+w]
                roi_color = frame[y:y+h, x:x+w]
                eyes = eye_cascade.detectMultiScale(roi_gray)
                for (ex,ey,ew,eh) in eyes:
                    cv2.rectangle(roi_color,(ex,ey),(ex+ew,ey+eh),(0,255,0),2)
            cv2.imshow('Live Feed', frame)
            ttt=False
            key = cv2.waitKey(20)
            if key == 27:
                break
    except:
        print("Error ocurred")

    # When everything is done, release the capture
    video_capture.release()
    cv2.destroyAllWindows()
    
def checkImage():
    eCount = 0
    img = cv2.imread(globImPath)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)
    for (x,y,w,h) in faces:
        cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)
        roi_gray = gray[y:y+h, x:x+w]
        roi_color = img[y:y+h, x:x+w]
        eyes = eye_cascade.detectMultiScale(roi_gray)
        eCount = len(eyes)
        for (ex,ey,ew,eh) in eyes:
            cv2.rectangle(roi_color,(ex,ey),(ex+ew,ey+eh),(0,255,0),2)
    globT.wm_attributes('-topmost', 0)
    cv2.destroyAllWindows()
    cv2.imshow('Face detection',img)
    cv2.waitKey(50)
    if len(faces)>0:
        print('face(s) found')
        return True 
    else:
        print('no face(s) found')
        return False
#close code
def close():
    cv2.destroyAllWindows()
    globT.destroy()
    globT.quit()




globT = Tk()
globIm = None
userImage = None
globT.protocol("WM_DELETE_WINDOW", close)
globT.update()
globT.lift()
f1 = Frame(globT)
f1.pack(side=BOTTOM)
    
#text
topText = Message(globT, text="Face recognizer",width=300,font=('arial', 20))
topText.pack(side=TOP)

#buttons
selButton = Button(f1, text = "Select file", fg="black",command = fileSelect,width=14,font=('arial', 16))
selButton.pack(side=LEFT)
camButton = Button(f1, text = "Take photo", fg="black",command = useCamera,width=14,font=('arial', 16))
camButton.pack(side=LEFT)
goButton = Button(f1, text = "Run", fg="green",command = checkImage,width=14,font=('arial', 16),state='disabled')
goButton.pack(side=LEFT)
quitButton = Button(f1, text = "Quit", fg="red",command=close,width=14,font=('arial', 16,'bold'))
quitButton.pack(side=LEFT)

#stuff
globT.minsize(globT.winfo_width(), globT.winfo_height())
globT.mainloop()
